
from PyQt5 import QtCore, QtGui, QtWidgets
from Application import Application
from pyCategoryPop import Ui_Dialog

##############################################################################################
                    # end of auto-generated code
##############################################################################################
        
        # placed here to instantiate the backend in the GUI at the start, 
        # it makes it easier for the backed to be passed into the popup windows
        # where several functions are called
        self.app = Application()
        self.app.initialize()


        self.importCsvBtn.clicked.connect(self.runApp)
        self.openCatPopUp.clicked.connect(self.openNewCatPop)

    # when newCategory button is pushed on categorize tab, this will
    # prompt a popup that allows user to enter a new category, monthly allotment
    # and a list of potential keywords
    def openNewCatPop(self):
        self.Dialog = QtWidgets.QDialog()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self.Dialog, self.app)
        self.ui.saveCategoryInfo.clicked.connect(self.updateCategoryListWidget)
        self.Dialog.show()
        self.ui.saveCategoryInfo.clicked.connect(self.closeDialog)

    def closeDialog(self):
        self.close()


    def runApp(self):
        self.filename = "../" + str(self.newCatInput.text())
        self.app.sortCompletedTransactions(self.filename)
        print("I think its fine....")
        for t in self.app.getUnhandledTransactions().completedTransactions:
            print("[UNHANDLED] Amount: " + t.amount + ", Location: " + t.location)

    # the function from app actually returns a dictionary
    # use the .values to access the category object stored in each value of the dictionary
    # category.name accesses the name to append to the list widget
    def updateCategoryListWidget(self):
        self.app.saveData()
        self.categoryList.clear()
        for category in self.app.getCategoryNamesList():
            self.categoryList.addItem(category)
        


##############################################################################################
                    # begin auto-generated code
##############################################################################################



categoryPopup




from PyQt5 import QtCore, QtGui, QtWidgets
from APIData import CategoryData


##############################################################################################
                    # end of auto-generated code
##############################################################################################

        self.app = App

##############################################################################################
                    # begin auto-generated code
##############################################################################################






##############################################################################################
                    # end of auto-generated code
##############################################################################################
    

    #keyword list initialize now and can have words appended with the add button 
    # and updated while the window is open
        self.keywordList = []
        self.addNewCategoryKeyword.clicked.connect(self.appendKeyword)
        self.saveCategoryInfo.clicked.connect(self.createNewCategory)

      # allows user to enter keywords for category and represents them
      # in a list field in the popup window
    def appendKeyword(self):
        self.newCategoryKeywords.addItem(str(self.newCategoryKeywordField.text()))
        self.keywordList.append(self.newCategoryKeywordField.text())
        self.newCategoryKeywordField.setText("")
        
      
      # will need a try and except-- the program crashes when the user hits enter
      # needs to tell the user to enter valid entries for all inputs  
    def createNewCategory(self):
        newCategory = CategoryData()
        newCategory.name = str(self.newCategoryName.text())
        newCategory.monthlyAllotment = float(self.newCategoryAllotment.text())
        newCategory.idKeywords = self.keywordList
        self.app.createNewCategory(newCategory)

##############################################################################################
                    # begin auto-generated code
##############################################################################################