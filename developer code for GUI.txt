
from PyQt5 import QtCore, QtGui, QtWidgets
from Application import Application
from pyCategoryPop import Ui_Dialog

##############################################################################################
                    # end of auto-generated code
##############################################################################################
        
        # placed here to instantiate the backend in the GUI at the start, 
        # it makes it easier for the backed to be passed into the popup windows
        # where several functions are called
        self.app = Application()
        self.app.initialize()
        self.filename = "../CreditCard3"
        self.app.sortCompletedTransactions(self.filename)
        self.createCategoryListWidget()
        self.printUnhandledTransactions()
        self.prepareForDragAndDrop()
    

        self.openCatPopUp.clicked.connect(self.openNewCatPop)
        self.editCategory.clicked.connect(self.openEditCatPop)


    # when newCategory button is pushed on categorize tab, this will
    # prompt a popup that allows user to enter a new category, monthly allotment
    # and a list of potential keywords
    def openNewCatPop(self):
        self.Dialog = QtWidgets.QDialog()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self.Dialog, self.app)
        self.ui.saveCategoryInfo.clicked.connect(self.updateCategoryListWidget)
        self.Dialog.show()

    def openEditCatPop(self):
        self.row = self.categoryList.currentRow()
        self.item = self.categoryList.item(self.row)
        self.item = str(self.item.text())

        self.Dialog = QtWidgets.QDialog()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self.Dialog, self.app)
        self.ui.saveCategoryInfo.clicked.connect(self.updateCategoryListWidget)
        self.Dialog.show()

        self.ui.newCategoryName.setText(self.app.transactionManager.categories[self.item].name)
        self.ui.newCategoryAllotment.setText(str(self.app.getAmountAllottedByCategory(self.item)))

        # First, check if there are any keywords to be added.
        # Add items only if an iterable list of keywords is returned.
        keywords = self.app.getKeywordsByCategory(self.item)
        if keywords != None:
          self.ui.newCategoryKeywords.addItems(keywords)



    # the function from app actually returns a dictionary
    # use the .values to access the category object stored in each value of the dictionary
    # category.name accesses the name to append to the list widget
    def updateCategoryListWidget(self):
        self.app.saveData()
        self.createCategoryListWidget()

    def createCategoryListWidget(self):
      self.categoryList.clear()
      for category in self.app.getCategoryNamesList():
        self.categoryList.addItem(category)

    def printUnhandledTransactions(self):
        for t in self.app.getUnhandledTransactions():
            self.unhandledTransactionsList.addItem("Location: " + t.location + "Amount: " + t.amount )
            for i in len(self.unhandledTransactionsList.count)


    def prepareForDragAndDrop(self):
        self.unhandledTransactionsList.setDragEnabled(True)


        


##############################################################################################
                    # begin auto-generated code
##############################################################################################


categoryPopup




from PyQt5 import QtCore, QtGui, QtWidgets
from APIData import CategoryData


##############################################################################################
                    # end of auto-generated code
##############################################################################################

        self.app = App

##############################################################################################
                    # begin auto-generated code
##############################################################################################






##############################################################################################
                    # end of auto-generated code
##############################################################################################
    

    #keyword list initialize now and can have words appended with the add button 
    # and updated while the window is open
        self.keywordList = []
        self.addNewCategoryKeyword.clicked.connect(self.appendKeyword)
        self.saveCategoryInfo.clicked.connect(self.createNewCategory)

      # allows user to enter keywords for category and represents them
      # in a list field in the popup window
    def appendKeyword(self):
        self.newCategoryKeywords.addItem(str(self.newCategoryKeywordField.text()))
        self.keywordList.append(self.newCategoryKeywordField.text())
        self.newCategoryKeywordField.setText("")
        
      
      # will need a try and except-- the program crashes when the user hits enter
      # needs to tell the user to enter valid entries for all inputs  
    def createNewCategory(self):
        newCategory = CategoryData()
        newCategory.name = str(self.newCategoryName.text())
        newCategory.monthlyAllotment = float(self.newCategoryAllotment.text())
        newCategory.idKeywords = self.keywordList
        self.app.createNewCategory(newCategory)

##############################################################################################
                    # begin auto-generated code
##############################################################################################